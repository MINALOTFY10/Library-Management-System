@model ReservationsPagerViewModel

<table class="custom-table" id="dataTable" width="100%" cellspacing="0">
    <thead>
        <tr>
            <th>ID</th>
            <th>Book Title</th>
            <th>Member Name</th>
            <th>Reservation Date</th>
            <th>Expiry Date</th>
            <th>Status</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var resItem in Model.Reservations)
        {
            <tr>
                <td>@resItem.Id</td>
                <td>@resItem.BookName</td>
                <td>@resItem.MemberName</td>
                <td>@resItem.ReservationDate.ToString("MM/dd/yyyy")</td>
                <td>@resItem.ExpiryDate.ToString("MM/dd/yyyy")</td>
                <td>
                    <div class="d-flex align-items-center  my-auto">
                        @switch (resItem.Status)
                        {
                            case Status.Waiting:
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-hourglass-half text-warning mx-2 my-auto text-lg" title="Waiting"></i>
                                    <span>Waiting</span>
                                </div>
                                break;
                            case Status.Expired:
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-times-circle text-danger mx-2 text-lg" title="Expired"></i>
                                    <span>Expired</span>
                                </div>
                                break;
                            case Status.Collected:
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-check-circle text-success mx-2 text-lg" title="Collected"></i>
                                    <span>Collected</span>
                                </div>
                                break;
                            case Status.Cancelled:
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-ban text-secondary mx-2 text-lg" title="Cancelled"></i>
                                    <span>Cancelled</span>
                                </div>
                                break;
                            default:
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-question-circle text-muted mx-2 text-lg" title="None"></i>
                                    <span>None</span>
                                </div>
                                break;
                        }
                    </div>
                </td>
                <td class="align-content-center">
                    <div class="d-flex justify-content-center">
                        <a asp-action="Delete" asp-route-id="@resItem.Id" class="text-danger text-lg ms-1" title="Delete"><i class="fas fa-trash"></i></a>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>


/*
This file defines the data structures and ViewModel used to manage and display reservation data in an ASP.NET Razor view.

1. The `ReservationsPagerViewModel` class:
   - Acts as a container for a list of `Reservation` objects.
   - This ViewModel is passed to the Razor page to provide the data needed for rendering.

2. The `Status` enum:
   - Represents different states that a reservation can be in.
   - Includes: 
     - Waiting: Reservation is active and waiting to be collected.
     - Expired: The reservation was not collected in time.
     - Collected: The reservation has been successfully picked up.
     - Cancelled: The reservation was canceled by the user or system.
     - None: A default or unknown state.

3. The `Reservation` class:
   - Represents a single reservation record.
   - Properties include:
     - Id: A unique identifier for the reservation.
     - BookName: Title of the book that has been reserved.
     - MemberName: The user who made the reservation.
     - ReservationDate: The date the reservation was created.
     - ExpiryDate: The deadline for collecting the reserved item.
     - Status: Indicates the current state of the reservation, using the `Status` enum.

4. The Razor view:
   - Accepts a `ReservationsPagerViewModel` as its model.
   - Renders a table to display all reservation entries.
   - Table headers show ID, Book Title, Member Name, Reservation Date, Expiry Date, Status, and Actions.
   - For each reservation:
     - Displays the properties in respective columns.
     - Formats the date values for better readability.
     - Uses a switch statement to visually differentiate each reservation status using Font Awesome icons:
       - Waiting: Hourglass icon with a warning color.
       - Expired: Red 'X' icon.
       - Collected: Green checkmark icon.
       - Cancelled: Grey ban icon.
       - None/Default: Question mark icon.
   - Provides a delete button in the last column, which links to an action that handles reservation deletion.

Overall, this code sets up the model and the view logic for listing reservations in a stylized HTML table in an ASP.NET MVC application.
*/
/*
This file defines the data structures and ViewModel used to manage and display reservation data in an ASP.NET Razor view.

1. The `ReservationsPagerViewModel` class:
   - Acts as a container for a list of `Reservation` objects.
   - This ViewModel is passed to the Razor page to provide the data needed for rendering.

2. The `Status` enum:
   - Represents different states that a reservation can be in.
   - Includes: 
     - Waiting: Reservation is active and waiting to be collected.
     - Expired: The reservation was not collected in time.
     - Collected: The reservation has been successfully picked up.
     - Cancelled: The reservation was canceled by the user or system.
     - None: A default or unknown state.

3. The `Reservation` class:
   - Represents a single reservation record.
   - Properties include:
     - Id: A unique identifier for the reservation.
     - BookName: Title of the book that has been reserved.
     - MemberName: The user who made the reservation.
     - ReservationDate: The date the reservation was created.
     - ExpiryDate: The deadline for collecting the reserved item.
     - Status: Indicates the current state of the reservation, using the `Status` enum.

4. The Razor view:
   - Accepts a `ReservationsPagerViewModel` as its model.
   - Renders a table to display all reservation entries.
   - Table headers show ID, Book Title, Member Name, Reservation Date, Expiry Date, Status, and Actions.
   - For each reservation:
     - Displays the properties in respective columns.
     - Formats the date values for better readability.
     - Uses a switch statement to visually differentiate each reservation status using Font Awesome icons:
       - Waiting: Hourglass icon with a warning color.
       - Expired: Red 'X' icon.
       - Collected: Green checkmark icon.
       - Cancelled: Grey ban icon.
       - None/Default: Question mark icon.
   - Provides a delete button in the last column, which links to an action that handles reservation deletion.

Overall, this code sets up the model and the view logic for listing reservations in a stylized HTML table in an ASP.NET MVC application.
*/
/*
This file defines the data structures and ViewModel used to manage and display reservation data in an ASP.NET Razor view.

1. The `ReservationsPagerViewModel` class:
   - Acts as a container for a list of `Reservation` objects.
   - This ViewModel is passed to the Razor page to provide the data needed for rendering.

2. The `Status` enum:
   - Represents different states that a reservation can be in.
   - Includes: 
     - Waiting: Reservation is active and waiting to be collected.
     - Expired: The reservation was not collected in time.
     - Collected: The reservation has been successfully picked up.
     - Cancelled: The reservation was canceled by the user or system.
     - None: A default or unknown state.

3. The `Reservation` class:
   - Represents a single reservation record.
   - Properties include:
     - Id: A unique identifier for the reservation.
     - BookName: Title of the book that has been reserved.
     - MemberName: The user who made the reservation.
     - ReservationDate: The date the reservation was created.
     - ExpiryDate: The deadline for collecting the reserved item.
     - Status: Indicates the current state of the reservation, using the `Status` enum.

4. The Razor view:
   - Accepts a `ReservationsPagerViewModel` as its model.
   - Renders a table to display all reservation entries.
   - Table headers show ID, Book Title, Member Name, Reservation Date, Expiry Date, Status, and Actions.
   - For each reservation:
     - Displays the properties in respective columns.
     - Formats the date values for better readability.
     - Uses a switch statement to visually differentiate each reservation status using Font Awesome icons:
       - Waiting: Hourglass icon with a warning color.
       - Expired: Red 'X' icon.
       - Collected: Green checkmark icon.
       - Cancelled: Grey ban icon.
       - None/Default: Question mark icon.
   - Provides a delete button in the last column, which links to an action that handles reservation deletion.

Overall, this code sets up the model and the view logic for listing reservations in a stylized HTML table in an ASP.NET MVC application.
*/
/*
This file defines the data structures and ViewModel used to manage and display reservation data in an ASP.NET Razor view.

1. The `ReservationsPagerViewModel` class:
   - Acts as a container for a list of `Reservation` objects.
   - This ViewModel is passed to the Razor page to provide the data needed for rendering.

2. The `Status` enum:
   - Represents different states that a reservation can be in.
   - Includes: 
     - Waiting: Reservation is active and waiting to be collected.
     - Expired: The reservation was not collected in time.
     - Collected: The reservation has been successfully picked up.
     - Cancelled: The reservation was canceled by the user or system.
     - None: A default or unknown state.

3. The `Reservation` class:
   - Represents a single reservation record.
   - Properties include:
     - Id: A unique identifier for the reservation.
     - BookName: Title of the book that has been reserved.
     - MemberName: The user who made the reservation.
     - ReservationDate: The date the reservation was created.
     - ExpiryDate: The deadline for collecting the reserved item.
     - Status: Indicates the current state of the reservation, using the `Status` enum.

4. The Razor view:
   - Accepts a `ReservationsPagerViewModel` as its model.
   - Renders a table to display all reservation entries.
   - Table headers show ID, Book Title, Member Name, Reservation Date, Expiry Date, Status, and Actions.
   - For each reservation:
     - Displays the properties in respective columns.
     - Formats the date values for better readability.
     - Uses a switch statement to visually differentiate each reservation status using Font Awesome icons:
       - Waiting: Hourglass icon with a warning color.
       - Expired: Red 'X' icon.
       - Collected: Green checkmark icon.
       - Cancelled: Grey ban icon.
       - None/Default: Question mark icon.
   - Provides a delete button in the last column, which links to an action that handles reservation deletion.

Overall, this code sets up the model and the view logic for listing reservations in a stylized HTML table in an ASP.NET MVC application.
*/

